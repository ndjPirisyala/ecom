{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nadee\\\\OneDrive\\\\Documents\\\\Ecommerce-Microservices-dev\\\\Ecommerce-Microservices-dev\\\\Frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { cartService } from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst {\n  user,\n  isAuthenticated,\n  loading\n} = useAuth();\n\n// Initial state\nconst initialState = {\n  items: [],\n  totalItems: 0,\n  totalPrice: 0\n};\n\n// Load cart from localStorage if available\nconst loadCartFromStorage = () => {\n  try {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : initialState;\n  } catch (error) {\n    console.error('Error loading cart from localStorage:', error);\n    return initialState;\n  }\n};\n\n// Safe API call wrapper\nconst safeApiCall = async apiCall => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.error('API call failed:', error);\n    return {\n      data: null\n    };\n  }\n};\n\n// Actions\nconst ADD_TO_CART = 'ADD_TO_CART';\nconst REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nconst UPDATE_QUANTITY = 'UPDATE_QUANTITY';\nconst CLEAR_CART = 'CLEAR_CART';\nconst SET_CART = 'SET_CART';\n\n// Reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case SET_CART:\n      {\n        return {\n          ...action.payload\n        };\n      }\n    case ADD_TO_CART:\n      {\n        const {\n          product,\n          quantity = 1,\n          size,\n          color\n        } = action.payload;\n        const productId = product.product_id || product.id; // Use product_id from backend or id from frontend\n        const itemKey = `${productId}-${size || 'default'}-${color || 'default'}`;\n\n        // Check if the item already exists in the cart\n        const existingItemIndex = state.items.findIndex(item => (item.product_id === productId || item.id === productId) && item.size === size && item.color === color);\n        let updatedItems;\n        if (existingItemIndex >= 0) {\n          // Update existing item\n          updatedItems = state.items.map((item, index) => {\n            if (index === existingItemIndex) {\n              return {\n                ...item,\n                quantity: item.quantity + quantity,\n                totalPrice: (item.quantity + quantity) * item.price\n              };\n            }\n            return item;\n          });\n        } else {\n          var _product$images;\n          // Add new item\n          const newItem = {\n            product_id: productId,\n            id: productId,\n            key: itemKey,\n            name: product.name,\n            image: product.image || ((_product$images = product.images) === null || _product$images === void 0 ? void 0 : _product$images[0]),\n            price: product.price,\n            quantity,\n            totalPrice: quantity * product.price,\n            size,\n            color\n          };\n          updatedItems = [...state.items, newItem];\n        }\n        const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n        const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n        return {\n          ...state,\n          items: updatedItems,\n          totalItems,\n          totalPrice\n        };\n      }\n    case REMOVE_FROM_CART:\n      {\n        const {\n          itemKey\n        } = action.payload;\n        const updatedItems = state.items.filter(item => item.key !== itemKey);\n        const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n        const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n        return {\n          ...state,\n          items: updatedItems,\n          totalItems,\n          totalPrice\n        };\n      }\n    case UPDATE_QUANTITY:\n      {\n        const {\n          itemKey,\n          quantity\n        } = action.payload;\n        if (quantity <= 0) {\n          return cartReducer(state, {\n            type: REMOVE_FROM_CART,\n            payload: {\n              itemKey\n            }\n          });\n        }\n        const updatedItems = state.items.map(item => {\n          if (item.key === itemKey) {\n            return {\n              ...item,\n              quantity,\n              totalPrice: quantity * item.price\n            };\n          }\n          return item;\n        });\n        const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n        const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n        return {\n          ...state,\n          items: updatedItems,\n          totalItems,\n          totalPrice\n        };\n      }\n    case CLEAR_CART:\n      return initialState;\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState, loadCartFromStorage);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [orderPlaced, setOrderPlaced] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const auth = useAuth();\n  const user = auth === null || auth === void 0 ? void 0 : auth.user;\n  const isAuthenticated = auth === null || auth === void 0 ? void 0 : auth.isAuthenticated;\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(state));\n  }, [state]);\n\n  // Fetch user's cart from backend when authenticated\n  useEffect(() => {\n    const fetchUserCart = async () => {\n      if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n        try {\n          setLoading(true);\n          setError(null);\n          const response = await cartService.getUserTransactions(user.id);\n\n          // If user has active cart/transaction, update local cart\n          if (response.data && response.data.length > 0) {\n            // Find the most recent incomplete transaction (cart)\n            const activeCart = response.data.find(transaction => !transaction.completed);\n            if (activeCart && activeCart.product_cart) {\n              // Transform backend cart format to frontend format\n              const cartItems = activeCart.product_cart.map(item => ({\n                product_id: item.product_id,\n                id: item.product_id,\n                key: `${item.product_id}-${item.size || 'default'}-${item.color || 'default'}`,\n                name: item.name,\n                image: item.image,\n                price: item.price,\n                quantity: item.quantity,\n                totalPrice: item.price * item.quantity,\n                size: item.size,\n                color: item.color\n              }));\n              const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);\n              const totalPrice = cartItems.reduce((total, item) => total + item.totalPrice, 0);\n              dispatch({\n                type: SET_CART,\n                payload: {\n                  items: cartItems,\n                  totalItems,\n                  totalPrice\n                }\n              });\n            }\n          }\n        } catch (err) {\n          setError('Failed to fetch cart. Please try again.');\n          console.error('Error fetching user cart:', err);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    fetchUserCart();\n  }, [isAuthenticated, user, dispatch]);\n  const addToCart = (product, quantity = 1, size = null, color = null) => {\n    dispatch({\n      type: ADD_TO_CART,\n      payload: {\n        product,\n        quantity,\n        size,\n        color\n      }\n    });\n  };\n  const removeFromCart = itemKey => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: {\n        itemKey\n      }\n    });\n  };\n  const updateQuantity = (itemKey, quantity) => {\n    dispatch({\n      type: UPDATE_QUANTITY,\n      payload: {\n        itemKey,\n        quantity\n      }\n    });\n  };\n  const clearCart = () => {\n    dispatch({\n      type: CLEAR_CART\n    });\n    setOrderPlaced(false);\n    setOrderId(null);\n  };\n\n  // Process checkout and create order\n  const checkout = async checkoutData => {\n    console.log(isAuthenticated);\n    if (!isAuthenticated) {\n      setError('You must be logged in to checkout');\n      return {\n        success: false,\n        message: 'Authentication required'\n      };\n    }\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Format cart items for backend\n      const productCart = state.items.map(item => ({\n        product_id: item.product_id || item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        size: item.size || null,\n        color: item.color || null,\n        image: item.image\n      }));\n\n      // Create order payload according to backend Order model\n      const orderData = {\n        user_id: user.id,\n        product_cart: productCart,\n        total_amount: state.totalPrice,\n        payment_method: checkoutData.paymentMethod,\n        shipping_address: {\n          address: checkoutData.address,\n          city: checkoutData.city,\n          state: checkoutData.state,\n          postal_code: checkoutData.postalCode,\n          country: checkoutData.country\n        },\n        created_at: new Date().toISOString()\n      };\n\n      // Send order to backend\n      const response = await cartService.insertTransaction(orderData);\n\n      // Handle successful order\n      if (response.data && response.data.order_id) {\n        setOrderId(response.data.order_id);\n        setOrderPlaced(true);\n        clearCart();\n        return {\n          success: true,\n          orderId: response.data.order_id\n        };\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to process order. Please try again.');\n      console.error('Checkout error:', err);\n      return {\n        success: false,\n        message: ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to process order. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart: state,\n      loading,\n      error,\n      orderPlaced,\n      orderId,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      checkout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"S9jdr4clNV2A7QMJKbMiVLqoqRE=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","cartService","useAuth","jsxDEV","_jsxDEV","CartContext","user","isAuthenticated","loading","initialState","items","totalItems","totalPrice","loadCartFromStorage","savedCart","localStorage","getItem","JSON","parse","error","console","safeApiCall","apiCall","data","ADD_TO_CART","REMOVE_FROM_CART","UPDATE_QUANTITY","CLEAR_CART","SET_CART","cartReducer","state","action","type","payload","product","quantity","size","color","productId","product_id","id","itemKey","existingItemIndex","findIndex","item","updatedItems","map","index","price","_product$images","newItem","key","name","image","images","reduce","total","filter","CartProvider","children","_s","dispatch","setLoading","setError","orderPlaced","setOrderPlaced","orderId","setOrderId","auth","setItem","stringify","fetchUserCart","response","getUserTransactions","length","activeCart","find","transaction","completed","product_cart","cartItems","err","addToCart","removeFromCart","updateQuantity","clearCart","checkout","checkoutData","log","success","message","productCart","orderData","user_id","total_amount","payment_method","paymentMethod","shipping_address","address","city","postal_code","postalCode","country","created_at","Date","toISOString","insertTransaction","order_id","Error","_err$response","_err$response$data","_err$response2","_err$response2$data","Provider","value","cart","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","$RefreshReg$"],"sources":["C:/Users/nadee/OneDrive/Documents/Ecommerce-Microservices-dev/Ecommerce-Microservices-dev/Frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { cartService } from '../services/api';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\nconst { user, isAuthenticated, loading } = useAuth();\n\n\n// Initial state\nconst initialState = {\n  items: [],\n  totalItems: 0,\n  totalPrice: 0,\n};\n\n// Load cart from localStorage if available\nconst loadCartFromStorage = () => {\n  try {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : initialState;\n  } catch (error) {\n    console.error('Error loading cart from localStorage:', error);\n    return initialState;\n  }\n};\n\n// Safe API call wrapper\nconst safeApiCall = async (apiCall) => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    console.error('API call failed:', error);\n    return { data: null };\n  }\n};\n\n// Actions\nconst ADD_TO_CART = 'ADD_TO_CART';\nconst REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nconst UPDATE_QUANTITY = 'UPDATE_QUANTITY';\nconst CLEAR_CART = 'CLEAR_CART';\nconst SET_CART = 'SET_CART';\n\n// Reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case SET_CART: {\n      return {\n        ...action.payload\n      };\n    }\n    \n    case ADD_TO_CART: {\n      const { product, quantity = 1, size, color } = action.payload;\n      const productId = product.product_id || product.id; // Use product_id from backend or id from frontend\n      const itemKey = `${productId}-${size || 'default'}-${color || 'default'}`;\n\n      // Check if the item already exists in the cart\n      const existingItemIndex = state.items.findIndex(item => \n        (item.product_id === productId || item.id === productId) && \n        item.size === size && \n        item.color === color\n      );\n\n      let updatedItems;\n\n      if (existingItemIndex >= 0) {\n        // Update existing item\n        updatedItems = state.items.map((item, index) => {\n          if (index === existingItemIndex) {\n            return {\n              ...item,\n              quantity: item.quantity + quantity,\n              totalPrice: (item.quantity + quantity) * item.price\n            };\n          }\n          return item;\n        });\n      } else {\n        // Add new item\n        const newItem = {\n          product_id: productId,\n          id: productId,\n          key: itemKey,\n          name: product.name,\n          image: product.image || product.images?.[0],\n          price: product.price,\n          quantity,\n          totalPrice: quantity * product.price,\n          size,\n          color,\n        };\n        updatedItems = [...state.items, newItem];\n      }\n\n      const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n      const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n\n      return {\n        ...state,\n        items: updatedItems,\n        totalItems,\n        totalPrice\n      };\n    }\n\n    case REMOVE_FROM_CART: {\n      const { itemKey } = action.payload;\n      const updatedItems = state.items.filter(item => item.key !== itemKey);\n      \n      const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n      const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n      \n      return {\n        ...state,\n        items: updatedItems,\n        totalItems,\n        totalPrice\n      };\n    }\n\n    case UPDATE_QUANTITY: {\n      const { itemKey, quantity } = action.payload;\n      if (quantity <= 0) {\n        return cartReducer(state, { type: REMOVE_FROM_CART, payload: { itemKey } });\n      }\n\n      const updatedItems = state.items.map(item => {\n        if (item.key === itemKey) {\n          return {\n            ...item,\n            quantity,\n            totalPrice: quantity * item.price\n          };\n        }\n        return item;\n      });\n\n      const totalItems = updatedItems.reduce((total, item) => total + item.quantity, 0);\n      const totalPrice = updatedItems.reduce((total, item) => total + item.totalPrice, 0);\n\n      return {\n        ...state,\n        items: updatedItems,\n        totalItems,\n        totalPrice\n      };\n    }\n\n    case CLEAR_CART:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport const CartProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(cartReducer, initialState, loadCartFromStorage);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [orderPlaced, setOrderPlaced] = useState(false);\n  const [orderId, setOrderId] = useState(null);\n  const auth = useAuth();\n  const user = auth?.user;\n  const isAuthenticated = auth?.isAuthenticated;\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(state));\n  }, [state]);\n\n  // Fetch user's cart from backend when authenticated\n  useEffect(() => {\n    const fetchUserCart = async () => {\n      if (isAuthenticated && user?.id) {\n        try {\n          setLoading(true);\n          setError(null);\n          const response = await cartService.getUserTransactions(user.id);\n          \n          // If user has active cart/transaction, update local cart\n          if (response.data && response.data.length > 0) {\n            // Find the most recent incomplete transaction (cart)\n            const activeCart = response.data.find(transaction => !transaction.completed);\n            \n            if (activeCart && activeCart.product_cart) {\n              // Transform backend cart format to frontend format\n              const cartItems = activeCart.product_cart.map(item => ({\n                product_id: item.product_id,\n                id: item.product_id,\n                key: `${item.product_id}-${item.size || 'default'}-${item.color || 'default'}`,\n                name: item.name,\n                image: item.image,\n                price: item.price,\n                quantity: item.quantity,\n                totalPrice: item.price * item.quantity,\n                size: item.size,\n                color: item.color\n              }));\n              \n              const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);\n              const totalPrice = cartItems.reduce((total, item) => total + item.totalPrice, 0);\n              \n              dispatch({\n                type: SET_CART,\n                payload: {\n                  items: cartItems,\n                  totalItems,\n                  totalPrice\n                }\n              });\n            }\n          }\n        } catch (err) {\n          setError('Failed to fetch cart. Please try again.');\n          console.error('Error fetching user cart:', err);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    \n    fetchUserCart();\n  }, [isAuthenticated, user, dispatch]);\n\n  const addToCart = (product, quantity = 1, size = null, color = null) => {\n    dispatch({\n      type: ADD_TO_CART,\n      payload: { product, quantity, size, color }\n    });\n  };\n\n  const removeFromCart = (itemKey) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: { itemKey }\n    });\n  };\n\n  const updateQuantity = (itemKey, quantity) => {\n    dispatch({\n      type: UPDATE_QUANTITY,\n      payload: { itemKey, quantity }\n    });\n  };\n\n  const clearCart = () => {\n    dispatch({ type: CLEAR_CART });\n    setOrderPlaced(false);\n    setOrderId(null);\n  };\n  \n  // Process checkout and create order\n  const checkout = async (checkoutData) => {\n    console.log(isAuthenticated)\n    if (!isAuthenticated) {\n      setError('You must be logged in to checkout');\n      return { success: false, message: 'Authentication required' };\n    }\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Format cart items for backend\n      const productCart = state.items.map(item => ({\n        product_id: item.product_id || item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        size: item.size || null,\n        color: item.color || null,\n        image: item.image\n      }));\n      \n      // Create order payload according to backend Order model\n      const orderData = {\n        user_id: user.id,\n        product_cart: productCart,\n        total_amount: state.totalPrice,\n        payment_method: checkoutData.paymentMethod,\n        shipping_address: {\n          address: checkoutData.address,\n          city: checkoutData.city,\n          state: checkoutData.state,\n          postal_code: checkoutData.postalCode,\n          country: checkoutData.country\n        },\n        created_at: new Date().toISOString()\n      };\n      \n      // Send order to backend\n      const response = await cartService.insertTransaction(orderData);\n      \n      // Handle successful order\n      if (response.data && response.data.order_id) {\n        setOrderId(response.data.order_id);\n        setOrderPlaced(true);\n        clearCart();\n        return { \n          success: true, \n          orderId: response.data.order_id \n        };\n      } else {\n        throw new Error('Invalid response from server');\n      }\n      \n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to process order. Please try again.');\n      console.error('Checkout error:', err);\n      return { \n        success: false, \n        message: err.response?.data?.message || 'Failed to process order. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart: state,\n        loading,\n        error,\n        orderPlaced,\n        orderId,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        clearCart,\n        checkout\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\nexport default CartContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}