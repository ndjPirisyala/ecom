{"ast":null,"code":"/**\n * Debug utilities for tracking component rendering and error handling\n */\n\n// Enable or disable debug logging\nconst DEBUG_MODE = true;\n\n/**\n * Log component mounting with timing information\n * @param {string} componentName - Name of the component being mounted\n */\nexport const logComponentMount = componentName => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${componentName} mounted at ${new Date().toISOString()}`);\n};\n\n/**\n * Log component updates with timing information\n * @param {string} componentName - Name of the component being updated\n * @param {Object} prevProps - Previous props\n * @param {Object} nextProps - Next props\n */\nexport const logComponentUpdate = (componentName, prevProps, nextProps) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${componentName} updated at ${new Date().toISOString()}`);\n};\n\n/**\n * Log API calls with timing information\n * @param {string} endpoint - API endpoint being called\n * @param {string} method - HTTP method (GET, POST, etc.)\n */\nexport const logApiCall = (endpoint, method = 'GET') => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] API ${method} call to ${endpoint} at ${new Date().toISOString()}`);\n};\n\n/**\n * Log API responses\n * @param {string} endpoint - API endpoint that was called\n * @param {Object} response - Response data\n * @param {boolean} isError - Whether this is an error response\n */\nexport const logApiResponse = (endpoint, response, isError = false) => {\n  if (!DEBUG_MODE) return;\n  if (isError) {\n    console.error(`[DEBUG] API error from ${endpoint}:`, response);\n  } else {\n    console.log(`[DEBUG] API response from ${endpoint}:`, response);\n  }\n};\n\n/**\n * Log context provider state changes\n * @param {string} contextName - Name of the context\n * @param {Object} state - Current state\n */\nexport const logContextState = (contextName, state) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${contextName} state updated:`, state);\n};\n\n/**\n * Log router navigation\n * @param {string} path - Path being navigated to\n */\nexport const logNavigation = path => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] Navigation to ${path} at ${new Date().toISOString()}`);\n};\n\n/**\n * Enhanced error logger that provides more context\n * @param {Error} error - Error object\n * @param {string} source - Source of the error (component name, function, etc.)\n * @param {Object} additionalData - Any additional data that might help debug\n */\nexport const logError = (error, source, additionalData = {}) => {\n  if (!DEBUG_MODE) return;\n  console.error(`[DEBUG ERROR] Error in ${source}:`, error);\n  if (Object.keys(additionalData).length > 0) {\n    console.error('[DEBUG ERROR] Additional context:', additionalData);\n  }\n\n  // Log stack trace if available\n  if (error && error.stack) {\n    console.error('[DEBUG ERROR] Stack trace:', error.stack);\n  }\n};","map":{"version":3,"names":["DEBUG_MODE","logComponentMount","componentName","console","log","Date","toISOString","logComponentUpdate","prevProps","nextProps","logApiCall","endpoint","method","logApiResponse","response","isError","error","logContextState","contextName","state","logNavigation","path","logError","source","additionalData","Object","keys","length","stack"],"sources":["C:/Users/nadee/OneDrive/Documents/Ecommerce-Microservices-dev/Ecommerce-Microservices-dev/Frontend/src/utils/debugUtils.js"],"sourcesContent":["/**\n * Debug utilities for tracking component rendering and error handling\n */\n\n// Enable or disable debug logging\nconst DEBUG_MODE = true;\n\n/**\n * Log component mounting with timing information\n * @param {string} componentName - Name of the component being mounted\n */\nexport const logComponentMount = (componentName) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${componentName} mounted at ${new Date().toISOString()}`); \n};\n\n/**\n * Log component updates with timing information\n * @param {string} componentName - Name of the component being updated\n * @param {Object} prevProps - Previous props\n * @param {Object} nextProps - Next props\n */\nexport const logComponentUpdate = (componentName, prevProps, nextProps) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${componentName} updated at ${new Date().toISOString()}`);\n};\n\n/**\n * Log API calls with timing information\n * @param {string} endpoint - API endpoint being called\n * @param {string} method - HTTP method (GET, POST, etc.)\n */\nexport const logApiCall = (endpoint, method = 'GET') => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] API ${method} call to ${endpoint} at ${new Date().toISOString()}`);\n};\n\n/**\n * Log API responses\n * @param {string} endpoint - API endpoint that was called\n * @param {Object} response - Response data\n * @param {boolean} isError - Whether this is an error response\n */\nexport const logApiResponse = (endpoint, response, isError = false) => {\n  if (!DEBUG_MODE) return;\n  if (isError) {\n    console.error(`[DEBUG] API error from ${endpoint}:`, response);\n  } else {\n    console.log(`[DEBUG] API response from ${endpoint}:`, response);\n  }\n};\n\n/**\n * Log context provider state changes\n * @param {string} contextName - Name of the context\n * @param {Object} state - Current state\n */\nexport const logContextState = (contextName, state) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] ${contextName} state updated:`, state);\n};\n\n/**\n * Log router navigation\n * @param {string} path - Path being navigated to\n */\nexport const logNavigation = (path) => {\n  if (!DEBUG_MODE) return;\n  console.log(`[DEBUG] Navigation to ${path} at ${new Date().toISOString()}`);\n};\n\n/**\n * Enhanced error logger that provides more context\n * @param {Error} error - Error object\n * @param {string} source - Source of the error (component name, function, etc.)\n * @param {Object} additionalData - Any additional data that might help debug\n */\nexport const logError = (error, source, additionalData = {}) => {\n  if (!DEBUG_MODE) return;\n  console.error(`[DEBUG ERROR] Error in ${source}:`, error);\n  if (Object.keys(additionalData).length > 0) {\n    console.error('[DEBUG ERROR] Additional context:', additionalData);\n  }\n  \n  // Log stack trace if available\n  if (error && error.stack) {\n    console.error('[DEBUG ERROR] Stack trace:', error.stack);\n  }\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,UAAU,GAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,aAAa,IAAK;EAClD,IAAI,CAACF,UAAU,EAAE;EACjBG,OAAO,CAACC,GAAG,CAAC,WAAWF,aAAa,eAAe,IAAIG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;AAChF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACL,aAAa,EAAEM,SAAS,EAAEC,SAAS,KAAK;EACzE,IAAI,CAACT,UAAU,EAAE;EACjBG,OAAO,CAACC,GAAG,CAAC,WAAWF,aAAa,eAAe,IAAIG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;AAChF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,GAAG,KAAK,KAAK;EACtD,IAAI,CAACZ,UAAU,EAAE;EACjBG,OAAO,CAACC,GAAG,CAAC,eAAeQ,MAAM,YAAYD,QAAQ,OAAO,IAAIN,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;AACzF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAGA,CAACF,QAAQ,EAAEG,QAAQ,EAAEC,OAAO,GAAG,KAAK,KAAK;EACrE,IAAI,CAACf,UAAU,EAAE;EACjB,IAAIe,OAAO,EAAE;IACXZ,OAAO,CAACa,KAAK,CAAC,0BAA0BL,QAAQ,GAAG,EAAEG,QAAQ,CAAC;EAChE,CAAC,MAAM;IACLX,OAAO,CAACC,GAAG,CAAC,6BAA6BO,QAAQ,GAAG,EAAEG,QAAQ,CAAC;EACjE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAGA,CAACC,WAAW,EAAEC,KAAK,KAAK;EACrD,IAAI,CAACnB,UAAU,EAAE;EACjBG,OAAO,CAACC,GAAG,CAAC,WAAWc,WAAW,iBAAiB,EAAEC,KAAK,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAK;EACrC,IAAI,CAACrB,UAAU,EAAE;EACjBG,OAAO,CAACC,GAAG,CAAC,yBAAyBiB,IAAI,OAAO,IAAIhB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;AAC7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,QAAQ,GAAGA,CAACN,KAAK,EAAEO,MAAM,EAAEC,cAAc,GAAG,CAAC,CAAC,KAAK;EAC9D,IAAI,CAACxB,UAAU,EAAE;EACjBG,OAAO,CAACa,KAAK,CAAC,0BAA0BO,MAAM,GAAG,EAAEP,KAAK,CAAC;EACzD,IAAIS,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;IAC1CxB,OAAO,CAACa,KAAK,CAAC,mCAAmC,EAAEQ,cAAc,CAAC;EACpE;;EAEA;EACA,IAAIR,KAAK,IAAIA,KAAK,CAACY,KAAK,EAAE;IACxBzB,OAAO,CAACa,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACY,KAAK,CAAC;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}